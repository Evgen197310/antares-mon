#!/usr/bin/env python3
import os
import subprocess
import json
import pymysql
import csv
from datetime import datetime


CONFIG_PATH = "/etc/rdpmon/config.json"

def load_config():
    with open(CONFIG_PATH, "r") as f:
        return json.load(f)

def fetch_file(config):
    scp_cmd = [
        "scp", "-i", config["ssh"]["key_path"],
        f'{config["ssh"]["user"]}@{config["ssh"]["host"]}:{config["ssh"]["remote_json"]}',
        config["local_json"]
    ]
    result = subprocess.run(scp_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.returncode != 0:
        print("‚ùå –û—à–∏–±–∫–∞ SCP:", result.stderr.decode())
        return False
    return True



def export_active_sessions_to_json(config, output_file):
    conn = pymysql.connect(
        host=config["mysql"]["host"],
        user=config["mysql"]["user"],
        password=config["mysql"]["password"],
        database=config["mysql"]["database"],
        charset='utf8mb4'
    )
    cur = conn.cursor(pymysql.cursors.DictCursor)
    cur.execute("SELECT * FROM rdp_active_sessions")
    rows = cur.fetchall()

    def convert(obj):
        if isinstance(obj, datetime):
            return obj.isoformat(sep=' ')
        return obj

    def dict_convert(row):
        return {k: convert(v) for k, v in row.items()}

    rows_clean = [dict_convert(r) for r in rows]

    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(rows_clean, f, ensure_ascii=False, indent=2)

    cur.close()
    conn.close()
    print(f"üìù –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {output_file}")

import csv
import pymysql

def export_active_sessions_to_csv(config, output_file):
    conn = pymysql.connect(
        host=config["mysql"]["host"],
        user=config["mysql"]["user"],
        password=config["mysql"]["password"],
        database=config["mysql"]["database"],
        charset='utf8mb4'
    )
    cur = conn.cursor()
    cur.execute("SELECT * FROM rdp_active_sessions")
    rows = cur.fetchall()
    headers = [i[0] for i in cur.description]

    with open(output_file, "w", newline='', encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(headers)
        writer.writerows(rows)

    cur.close()
    conn.close()
    print(f"üìù –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {output_file}")


def update_active_sessions(sessions, config):
    conn = pymysql.connect(
        host=config["mysql"]["host"],
        user=config["mysql"]["user"],
        password=config["mysql"]["password"],
        database=config["mysql"]["database"],
        charset='utf8mb4'
    )
    cur = conn.cursor(pymysql.cursors.DictCursor)
    now = datetime.now()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    cur.execute("SELECT * FROM rdp_active_sessions")
    old_sessions = {(r["username"], str(r["session_id"])): r for r in cur.fetchall()} # type: ignore

    seen_keys = set()
    inserted = 0
    closed = 0

    state_map = {
        0: "–ê–∫—Ç–∏–≤–Ω–∞—è",
        1: "–ü–æ–¥–∫–ª—é—á—ë–Ω",
        2: "–ó–∞–ø—Ä–æ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        3: "–¢–µ–Ω–µ–≤–æ–π —Ä–µ–∂–∏–º",
        4: "–û—Ç–∫–ª—é—á—ë–Ω",
        5: "–ü—Ä–æ—Å—Ç–æ–π",
        6: "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        7: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
        8: "–°–±—Ä–æ—à–µ–Ω–∞",
        9: "–û–∂–∏–¥–∞–Ω–∏–µ"
    }

    for s in sessions:
        session_state = s.get("SessionState")
        state_label = state_map.get(session_state, f"Unknown({session_state})")

        if session_state not in (0, 1):
            username = s.get("UserName", "")
            session_id = s.get("SessionId", "")
            print(f"[SKIP] {username:<15} SID {session_id:<4} [{state_label}] ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞)")
            continue

        username = s.get("UserName", "")
        domain = s.get("DomainName", "")
        session_id = str(s.get("SessionId"))
        state = str(session_state)
        key = (username, session_id)
        seen_keys.add(key)

        old = old_sessions.get(key)
        login_time = old["login_time"] if old else now # type: ignore
        duration_seconds = int((now - login_time).total_seconds())

        cur.execute("""
            INSERT INTO rdp_active_sessions
                (username, domain, collection_name, remote_host, login_time,
                 state, session_id, notes, duration_seconds, last_update)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, CURRENT_TIMESTAMP)
            ON DUPLICATE KEY UPDATE
                remote_host=VALUES(remote_host),
                state=VALUES(state),
                notes=VALUES(notes),
                duration_seconds=VALUES(duration_seconds),
                last_update=CURRENT_TIMESTAMP
        """, (
            username,
            domain,
            s.get("CollectionName", ""),
            s.get("HostServer", ""),
            login_time.strftime("%Y-%m-%d %H:%M:%S"),
            state,
            session_id,
            s.get("ApplicationType", ""),
            duration_seconds
        ))

        inserted += 1
        print(f"[OK  ] {username:<15} SID {session_id:<4} [{state_label}] ‚Äî –∞–∫—Ç–∏–≤–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration_seconds} —Å–µ–∫.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–µ —Å–µ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
    for key, old in old_sessions.items():
        if key not in seen_keys:
            cur.execute("""
                INSERT INTO rdp_session_history
                    (username, domain, collection_name, remote_host,
                     login_time, logout_time, duration_seconds, session_id, notes)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                old["username"],
                old["domain"],
                old["collection_name"],
                old["remote_host"],
                old["login_time"],
                now,
                int((now - old["login_time"]).total_seconds()),
                old["session_id"],
                old["notes"]
            ))
            cur.execute("DELETE FROM rdp_active_sessions WHERE id=%s", (old["id"],))
            closed += 1
            print(f"[END ] {old['username']:<15} SID {old['session_id']:<4} ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é.")

    conn.commit()
    cur.close()
    conn.close()

    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(sessions)} —Å–µ—Å—Å–∏–π")
    print(f"‚ûï –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {inserted}")
    print(f"üóëÔ∏è  –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é: {closed}")

import time

def fetch_sessions(config, retries=6, delay=5):
    """
    –ß–∏—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π JSON-—Ñ–∞–π–ª —Å–µ—Å—Å–∏–π, –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥.
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–¥–∞—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º retries (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6 –ø–æ–ø—ã—Ç–æ–∫ = 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è).
    """
    path = config["local_json"]
    for attempt in range(1, retries+1):
        if not os.path.exists(path):
            print(f"‚ùå [{attempt}] –õ–æ–∫–∞–ª—å–Ω—ã–π JSON –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        else:
            try:
                with open(path, encoding="utf-8-sig") as f:
                    data = json.load(f)
                    if not isinstance(data, list) or not all(isinstance(x, dict) for x in data):
                        print(f"‚ùå [{attempt}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: –æ–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –ø–æ–ª—É—á–µ–Ω–æ {type(data)}")
                        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                    print(f"üü¢ [{attempt}] –£—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω —Ñ–∞–π–ª {path}, —Å–µ—Å—Å–∏–π: {len(data)}")
                    return data
            except Exception as e:
                print(f"‚ùå [{attempt}] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        if attempt < retries:
            print(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
            time.sleep(delay)
        else:
            print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞.")
    return []


def main():
    config = load_config()
    print(f"[{datetime.now()}] ‚è≥ –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–π –ø–æ SCP...")
    if not fetch_file(config):
        return
    sessions = fetch_sessions(config)
    print(f"[{datetime.now()}] üü¢ –°–µ—Å—Å–∏–π –≤—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ: {len(sessions)}")
    update_active_sessions(sessions, config)
    export_active_sessions_to_json(config, config["export_json"])
    export_active_sessions_to_csv(config, config["export_csv"])
    print(f"[{datetime.now()}] ‚úÖ rdp_active_sessions –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    main()
