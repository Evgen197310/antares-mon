#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import sys
import os
import time
import requests
import subprocess
from threading import Thread

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    try:
        sys.path.append('.')
        from app import create_app
        from app.config import Config
        from app.models.database import db_manager
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã: OK")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_app_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        from app import create_app
        from app.config import Config
        
        config = Config()
        app = create_app(config)
        
        with app.app_context():
            blueprints = list(app.blueprints.keys())
            print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ. Blueprints: {blueprints}")
            return True, app
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False, None

def test_database_connections():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î...")
    try:
        from app.models.database import db_manager
        
        db_results = {}
        for db_type in ['vpn', 'rdp', 'smb']:
            try:
                with db_manager.get_connection(db_type) as conn:
                    with conn.cursor() as cursor:
                        cursor.execute("SELECT 1")
                        result = cursor.fetchone()
                        db_results[db_type] = "OK"
                        print(f"‚úÖ {db_type.upper()} –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK")
            except Exception as e:
                db_results[db_type] = f"ERROR: {e}"
                print(f"‚ùå {db_type.upper()} –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return all(status == "OK" for status in db_results.values()), db_results
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ë–î: {e}")
        return False, {}

def start_test_server(app):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        app.run(host='127.0.0.1', port=8000, debug=False, threaded=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def test_endpoints():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints...")
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    time.sleep(3)
    
    endpoints = [
        ('/', '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'),
        ('/api/', 'API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
        ('/api/health', 'Health check'),
        ('/vpn/', 'VPN –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'),
        ('/rdp/', 'RDP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'),
        ('/smb/', 'SMB –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
    ]
    
    results = {}
    for endpoint, description in endpoints:
        try:
            response = requests.get(f'http://127.0.0.1:8000{endpoint}', timeout=5)
            if response.status_code == 200:
                results[endpoint] = "OK"
                print(f"‚úÖ {description} ({endpoint}): OK")
            else:
                results[endpoint] = f"HTTP {response.status_code}"
                print(f"‚ö†Ô∏è {description} ({endpoint}): HTTP {response.status_code}")
        except Exception as e:
            results[endpoint] = f"ERROR: {e}"
            print(f"‚ùå {description} ({endpoint}): {e}")
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ v2.0.0")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç—ã
    if not test_imports():
        print("‚ùå –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
        return False
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_ok, app = test_app_creation()
    if not app_ok:
        print("‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
        return False
    
    # –¢–µ—Å—Ç 3: –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_ok, db_results = test_database_connections()
    if not db_ok:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    # –¢–µ—Å—Ç 4: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥...")
    server_thread = Thread(target=start_test_server, args=(app,), daemon=True)
    server_thread.start()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints
    endpoint_results = test_endpoints()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    print("\nüîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
    print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã: OK")
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: OK")
    
    print("\nüíæ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    for db_type, status in db_results.items():
        icon = "‚úÖ" if status == "OK" else "‚ùå"
        print(f"{icon} {db_type.upper()}: {status}")
    
    print("\nüåê Endpoints:")
    for endpoint, status in endpoint_results.items():
        icon = "‚úÖ" if status == "OK" else "‚ö†Ô∏è" if "HTTP" in status else "‚ùå"
        print(f"{icon} {endpoint}: {status}")
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    total_tests = 2 + len(db_results) + len(endpoint_results)
    passed_tests = 2 + sum(1 for s in db_results.values() if s == "OK") + sum(1 for s in endpoint_results.values() if s == "OK")
    
    print(f"\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests >= total_tests * 0.8:  # 80% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        print("üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û!")
        print("\nüåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   http://localhost:8000/ - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        print("   http://localhost:8000/api/ - API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        return True
    else:
        print("‚ö†Ô∏è –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
